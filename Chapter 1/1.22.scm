(define (prime? n)
  (define (find-divisor n test-divisor)
    (define (divides? d n)
      (= (remainder n d) 0))
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (smallest-divisor n)
    (find-divisor n 2))
  (= (smallest-divisor n) n))

(define (timed-prime-test n)
  (define (report-prime-test elapsed-time)
    (display " *** ")
    (display elapsed-time))
  (define (start-prime-test n start-time)
    (if (prime? n)
        (report-prime-test (- (runtime) start-time))))
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (search-for-primes begin end)
  (define (iterator x)
    (cond ((>= x end) #t)
          (else (timed-prime-test x)
                (iterator (+ x 2)))))
  (if (odd? begin)
      (iterator begin)
      (iterator (+ 1 begin))))

(search-for-primes 1000 1010)
(search-for-primes 10000 10010)
(search-for-primes 100000 100010)
(search-for-primes 1000000 1000010)
