(define (fast-prime? n)
  (define (fermat-test n)
    (define (expmod base exp mod)
      (cond ((= exp 0) 1)
            ((even? exp) (modulo (square (expmod base (/ exp 2) mod)) mod))
            (else (modulo (* (expmod base (- exp 1) mod) base) mod))))
    (define (try-it a)
      (= (expmod a n n) a))
    (try-it (+ 1 (random (- n 1)))))
  (fermat-test n))

(define (timed-prime-test n)
  (define (report-prime-test elapsed-time)
    (display " *** ")
    (display elapsed-time))
  (define (start-prime-test n start-time)
    (if (fast-prime? n)
        (report-prime-test (- (runtime) start-time))))
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (search-for-primes begin end)
  (define (iterator x)
    (cond ((>= x end) #t)
          (else (timed-prime-test x)
                (iterator (+ x 2)))))
  (if (odd? begin)
      (iterator begin)
      (iterator (+ 1 begin))))

(search-for-primes 1000 1010)
(search-for-primes 10000 10010)
(search-for-primes 100000 100010)
(search-for-primes 1000000 1000010)
